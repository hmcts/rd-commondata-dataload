plugins {
  id 'application'
  id 'checkstyle'
  id 'pmd'
  id 'jacoco'
  id 'io.spring.dependency-management' version '1.0.10.RELEASE'
  id 'org.springframework.boot' version '2.3.11.RELEASE'
  id 'com.github.ben-manes.versions' version '0.33.0'
  id 'org.sonarqube' version '3.0'
  id "org.flywaydb.flyway" version "7.0.3"
  id "info.solidsoft.pitest" version '1.5.2'
  id 'uk.gov.hmcts.java' version '0.12.0'
}

mainClassName = 'uk.gov.hmcts.reform.rd.commondata.RdCommondataLoadApplication'
def jarName = 'rd-commondata-dataload.jar'

group = 'uk.gov.hmcts.reform.rd'
version = '0.0.1'

allprojects {
  sourceCompatibility = '11'
  targetCompatibility = '11'
}

sourceSets {
  functionalTest {
    java {
      compileClasspath += main.output
      runtimeClasspath += main.output
      srcDir file('src/functionalTest/java')
    }
    resources.srcDir file('src/functionalTest/resources')
  }

  integrationTest {
    java {
      compileClasspath += main.output
      runtimeClasspath += main.output
      srcDir file('src/integrationTest/java')
    }
    resources.srcDir file('src/integrationTest/resources')
  }

  smokeTest {
    java {
      compileClasspath += main.output
      runtimeClasspath += main.output
      srcDir file('src/smokeTest/java')
    }
    resources.srcDir file('src/smokeTest/resources')
  }
}

tasks.withType(JavaCompile) {
  options.compilerArgs << "-Xlint:unchecked" << "-Werror"
}

tasks.withType(Test) {
  useJUnitPlatform()

  testLogging {
    exceptionFormat = 'full'
  }
}

test {
  failFast = true
}

task functional(type: Test) {
  description = "Runs functional tests"
  group = "Verification"
  testClassesDirs = sourceSets.functionalTest.output.classesDirs
  classpath = sourceSets.functionalTest.runtimeClasspath
}

task integration(type: Test) {
  description = "Runs integration tests"
  group = "Verification"
  testClassesDirs = sourceSets.integrationTest.output.classesDirs
  classpath = sourceSets.integrationTest.runtimeClasspath
  failFast = true
}

task smoke(type: Test) {
  description = "Runs Smoke Tests"
  testClassesDirs = sourceSets.smokeTest.output.classesDirs
  classpath = sourceSets.smokeTest.runtimeClasspath
}

checkstyle {
  maxWarnings = 0
  toolVersion = '8.29'
  getConfigDirectory().set(new File(rootDir, 'config/checkstyle'))
}

pmd {
  toolVersion = "6.39.0"
  sourceSets = [sourceSets.main, sourceSets.test, sourceSets.functionalTest, sourceSets.integrationTest, sourceSets.smokeTest]
  reportsDir = file("$project.buildDir/reports/pmd")
  // https://github.com/pmd/pmd/issues/876
  ruleSets = []
  ruleSetFiles = files("config/pmd/ruleset.xml")
}

jacoco {
  toolVersion = "0.8.5"
}

jacocoTestReport {
  executionData(test, integration)
  reports {
    xml.required = true
    csv.required = false
    xml.destination file("${buildDir}/reports/jacoco/test/jacocoTestReport.xml")
  }
}

pitest {
  junit5PluginVersion = '0.12'
  targetClasses = ['uk.gov.hmcts.reform.rd.commondata.*']
  testSourceSets = [sourceSets.integrationTest, sourceSets.test]
  excludedClasses = [
    'uk.gov.hmcts.reform.rd.commondata.RdCommondataLoadApplication'

  ]
  threads = 6
  enableDefaultIncrementalAnalysis = true
  historyInputLocation = 'build/reports/pitest/fastermutationtesting'
  historyOutputLocation = 'build/reports/pitest/fastermutationtestingoutput'
  outputFormats = ['XML', 'HTML']
  timestampedReports = true
  mutationThreshold = 85
  useClasspathFile = true
}
project.tasks['pitest'].group = "Verification"
project.tasks['sonarqube'].group = "Verification"
project.tasks['sonarqube'].dependsOn test,jacocoTestReport

project.tasks['sonarqube'].dependsOn test, integration, jacocoTestReport

sonarqube {
  properties {
    property "sonar.projectName", "RD :: Common Data load"
    property "sonar.projectKey", "RDCOMMONDATALOAD"
    property "sonar.coverage.jacoco.xmlReportPaths", "${jacocoTestReport.reports.xml.destination.path}"
    property "sonar.pitest.mode", "reuseReport"
    property "sonar.pitest.reportsDirectory", "build/reports/pitest"
    property "sonar.exclusions", "src/main/java/uk/gov/hmcts/reform/rd/commondata/RdCommondataLoadApplication.java"
  }
}

// before committing a change, make sure task still works
dependencyUpdates {
  def isNonStable = { String version ->
    def stableKeyword = ['RELEASE', 'FINAL', 'GA'].any { qualifier -> version.toUpperCase().contains(qualifier) }
    def regex = /^[0-9,.v-]+$/
    return !stableKeyword && !(version ==~ regex)
  }
  rejectVersionIf { selection -> // <---- notice how the closure argument is named
    return isNonStable(selection.candidate.version) && !isNonStable(selection.currentVersion)
  }
}

// https://jeremylong.github.io/DependencyCheck/dependency-check-gradle/configuration.html
dependencyCheck {
  // Specifies if the build should be failed if a CVSS score above a specified level is identified.
  // range of 0-10 fails the build, anything greater and it doesn't fail the build
  failBuildOnCVSS = System.getProperty('dependencyCheck.failBuild') == 'true' ? 0 : 11
  suppressionFile = 'config/owasp/suppressions.xml'

  analyzers {
    // Disable scanning of .NET related binaries
    assemblyEnabled = false
  }
}

repositories {
  mavenLocal()
  jcenter()
  mavenCentral()
  maven {
    url 'https://jitpack.io'
  }
}

def versions = [
  junit               : '5.7.0',
  junitPlatform       : '1.7.0',
  reformLogging       : '5.1.5',
  springBoot          : springBoot.class.package.implementationVersion,
  springfoxSwagger    : '2.9.2',
  serenity            : '2.0.76',
  lombok              : '1.18.6',
  flyway              : '6.5.5',
  camel               : '3.8.0'
]

ext.libraries = [
  junit5: [
    "org.junit.jupiter:junit-jupiter-api:${versions.junit}",
    "org.junit.jupiter:junit-jupiter-engine:${versions.junit}",
    "org.junit.jupiter:junit-jupiter-params:${versions.junit}",
    "org.junit.platform:junit-platform-commons:${versions.junitPlatform}",
    "org.junit.platform:junit-platform-engine:${versions.junitPlatform}"
  ]
]
ext {
  reformLoggingVersion = "5.1.9"
}

dependencies {  implementation (group: 'org.springframework.boot', name: 'spring-boot-starter-web'){
  exclude group: 'org.glassfish', module: 'jakarta.el'
}
  implementation group: 'org.springframework.boot', name: 'spring-boot-starter-actuator'
  implementation group: 'org.springframework.boot', name: 'spring-boot-starter-aop'
  implementation group: 'org.springframework.boot', name: 'spring-boot-starter-json'

  implementation group: 'io.springfox', name: 'springfox-swagger2', version: versions.springfoxSwagger

  implementation group: 'uk.gov.hmcts.reform', name: 'logging', version: versions.reformLogging
  implementation group: 'uk.gov.hmcts.reform', name: 'logging-appinsights', version: versions.reformLogging
  implementation group: 'org.springframework.cloud', name: 'spring-cloud-starter-netflix-hystrix', version: '2.2.5.RELEASE'
  implementation (group: 'uk.gov.hmcts.reform', name: 'properties-volume-spring-boot-starter', version: '0.1.0'){
    exclude group: 'org.glassfish', module: 'jakarta.el'
  }

  implementation group: 'org.apache.logging.log4j', name: 'log4j-api', version: '2.13.3'
  implementation group: 'org.apache.logging.log4j', name: 'log4j-to-slf4j', version: '2.13.3'

  implementation group: 'org.springframework.boot', name: 'spring-boot-starter-jdbc'
  implementation group: 'commons-lang', name: 'commons-lang', version: '2.6'
  implementation group: 'javax.el', name: 'javax.el-api', version: '3.0.0'
  implementation group: 'org.flywaydb', name: 'flyway-core', version: versions.flyway

  implementation group: 'org.postgresql', name: 'postgresql', version: '42.2.14'

  //implementation 'com.github.hmcts:data-ingestion-lib:0.4.4.8'

  //Fix for CVE-2021-29425
  implementation 'commons-io:commons-io:2.8.0'
  implementation group: 'org.apache.camel', name: 'camel-bom', version: versions.camel, ext: 'pom'
  implementation group: 'org.apache.camel.springboot', name: 'camel-spring-boot-dependencies', version: versions.camel

  implementation group: 'org.apache.httpcomponents', name: 'httpclient', version: '4.5.13'

  compileOnly group: 'org.projectlombok', name: 'lombok', version: versions.lombok
  annotationProcessor group: 'org.projectlombok', name: 'lombok', version: versions.lombok

  testImplementation libraries.junit5
  testImplementation group: 'org.springframework.boot', name: 'spring-boot-starter-test', {
    exclude group: 'junit', module: 'junit'
    exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
  }

  testImplementation group: 'io.rest-assured', name: 'rest-assured', version: '4.3.1'
  testImplementation group: 'org.hamcrest', name: 'hamcrest-all', version: '1.3'
  testImplementation group: 'org.powermock', name: 'powermock-api-mockito2', version: '2.0.7'

  testImplementation (group: 'net.serenity-bdd', name: 'serenity-core', version: versions.serenity)
    {
      exclude group: 'com.vladsch.flexmark', module: 'flexmark-all'
      exclude group: 'javax.websocket', module: 'javax.websocket-api'
    }
  testImplementation (group: 'net.serenity-bdd', name: 'serenity-junit', version: versions.serenity)
    {
      exclude group: 'com.vladsch.flexmark', module: 'flexmark-all'
      exclude group: 'javax.websocket', module: 'javax.websocket-api'
    }
  testImplementation (group: 'net.serenity-bdd', name: 'serenity-rest-assured', version: versions.serenity)
    {
      exclude group: 'com.vladsch.flexmark', module: 'flexmark-all'
      exclude group: 'javax.websocket', module: 'javax.websocket-api'
    }
  testImplementation (group: 'net.serenity-bdd', name: 'serenity-spring', version: versions.serenity)
    {
      exclude group: 'com.vladsch.flexmark', module: 'flexmark-all'
      exclude group: 'javax.websocket', module: 'javax.websocket-api'
    }

  testImplementation group: 'org.springframework.boot', name: 'spring-boot-starter-test', version: versions.springBoot
  testImplementation 'org.codehaus.sonar-plugins:sonar-pitest-plugin:0.5'

  integrationTestImplementation sourceSets.main.runtimeClasspath
  integrationTestImplementation sourceSets.test.runtimeClasspath

  functionalTestImplementation sourceSets.main.runtimeClasspath
  functionalTestImplementation sourceSets.test.runtimeClasspath

  smokeTestImplementation sourceSets.test.runtimeClasspath

  testImplementation group: 'org.apache.camel', name: 'camel-test-spring-junit5', version: versions.camel
  testImplementation group: 'org.apache.camel', name: 'camel-test-junit5', version: versions.camel
  testImplementation group: 'org.testcontainers', name: 'postgresql', version: '1.15.1'
  testImplementation group: 'org.springframework.batch', name: 'spring-batch-test', version: '4.2.4.RELEASE'
  testImplementation group: 'org.javatuples', name: 'javatuples', version: '1.2'

  testImplementation group: 'org.postgresql', name: 'postgresql', version: '42.2.14'
}

gradle.startParameter.continueOnFailure = true

bootJar {
  archiveFileName = jarName

  manifest {
    attributes('Implementation-Version': project.version.toString())
  }
}


// Gradle 7.x issue, workaround from: https://github.com/gradle/gradle/issues/17236#issuecomment-894768083
rootProject.tasks.named("processSmokeTestResources") {
  duplicatesStrategy = 'include'
}

wrapper {
  distributionType = Wrapper.DistributionType.ALL
}


// this is required to force Java running on the Azure Windows Server OS into using
// UTF-8 as the default character set instead of windows-1252 which causes issues.
// this setting only applies when running via gradle bootRun -- see web.config for the
// java flag that configures the deployed applications
applicationDefaultJvmArgs = ["-Dfile.encoding=UTF-8"]

// Fix for CVE-2021-21295 & need to be removed with new Azure blob version
configurations.all {
  resolutionStrategy.eachDependency { details ->
    if (details.requested.group == 'io.netty'
      && details.requested.name != 'netty-tcnative-boringssl-static' ) {
      details.useVersion "4.1.69.Final"
    }

    // Fix for CVE-2020-21913 & needs to be removed when camel-azure-starter is upgraded to latest version in data-ingestion-library
    if (details.requested.group == 'com.ibm.icu') {
      details.useVersion "66.1"
    }
  }
}

test {
  useJUnitPlatform()
}

functional {
  useJUnitPlatform()
}

integration {
  useJUnitPlatform()
}
